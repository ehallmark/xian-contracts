# con_verifier_optimized
import con_verifier_opt_pairing_mini as P

curve_order = 21888242871839275222246405745257275088548364400416034343698204186575808495617
vk = {
    "IC": [[
            16225148364316337376768119297456868908427925829817748684139175309620217098814,
            5167268689450204162046084442581051565997733233062478317813755636162413164690,
            1,1
        ],[
            12882377842072682264979317445365303375159828272423495088911985689463022094260,
            19488215856665173565526758360510125932214252767275816329232454875804474844786,
            1,1
        ],[
            13083492661683431044045992285476184182144099829507350352128615182516530014777,
            602051281796153692392523702676782023472744522032670801091617246498551238913,
            1,1
        ],[
            9732465972180335629969421513785602934706096902316483580882842789662669212890,
            2776526698606888434074200384264824461688198384989521091253289776235602495678,
            1,1
        ],[
            8586364274534577154894611080234048648883781955345622578531233113180532234842,
            21276134929883121123323359450658320820075698490666870487450985603988214349407,
            1,1
        ],[
            4910628533171597675018724709631788948355422829499855033965018665300386637884,
            20532468890024084510431799098097081600480376127870299142189696620752500664302,
            1,1
        ],[
            15335858102289947642505450692012116222827233918185150176888641903531542034017,
            5311597067667671581646709998171703828965875677637292315055030353779531404812,
            1,1
        ]
    ],"vk_alfa_1": [
        20692898189092739278193869274495556617788530808486270118371701516666252877969,
        11713062878292653967971378194351968039596396853904572879488166084231740557279,
        1,1
    ],"vk_beta_2": [
        [12168528810181263706895252315640534818222943348193302139358377162645029937006,281120578337195720357474965979947690431622127986816839208576358024608803542],
        [16129176515713072042442734839012966563817890688785805090011011570989315559913,9011703453772030375124466642203641636825223906145908770308724549646909480510],
        [0,1],
        [0,1]
    ],"vk_gamma_2": [
        [11559732032986387107991004021392285783925812861821192530917403151452391805634,10857046999023057135944570762232829481370756359578518086990519993285655852781],
        [4082367875863433681332203403145435568316851327593401208105741076214120093531,8495653923123431417604973247489272438418190587263600148770280649306958101930],
        [0,1],
        [0,1]
    ],"vk_delta_2": [
        [21280594949518992153305586783242820682644996932183186320680800072133486887432,150879136433974552800030963899771162647715069685890547489132178314736470662],
        [1081836006956609894549771334721413187913047383331561601606260283167615953295,11434086686358152335540554643130007307617078324975981257823476472104616196090],
        [0,1],
        [0,1]
    ]
}

def verify(
    inputs: list,
    proof: dict) -> int:
    IC = vk['IC']
    assert len(inputs) + 1 == len(IC), "verifier-bad-input"
    # Compute the linear combination vk_x
    vk_x = P.compute_vk(IC, inputs)

    p = [
        proof['A'],
        vk['vk_alfa_1'],
        vk_x,
        proof['C']
    ]
    q = [
        proof['B'],
        vk['vk_beta_2'],
        vk['vk_gamma_2'],
        vk['vk_delta_2']
    ]
    return P.final_result(p, q)


@export
def verify_proof(
    a: list,
    b: list,
    c: list,
    inputs: list
) -> bool:
    proof = {}
    proof['A'] = (int(a[0]), int(a[1]), int(a[2]), 1)
    proof['B'] = (
        [int(b[0][1]), int(b[0][0])],
        [int(b[1][1]), int(b[1][0])],
        [int(b[2][1]), int(b[2][0])],
        [0, 1]
    )
    proof['C'] = (int(c[0]), int(c[1]), int(c[2]), 1)
    inputs = [int(i) for i in inputs]
    if verify(inputs, proof) == 0:
        return True
    else:
        return False
